import java.sql.*;
import java.util.*;

// ==== Model ====
class Student {
    private int studentID;
    private String name;
    private String department;
    private double marks;

    public Student(int studentID, String name, String department, double marks) {
        this.studentID = studentID;
        this.name = name;
        this.department = department;
        this.marks = marks;
    }

    public int getStudentID() { return studentID; }
    public String getName() { return name; }
    public String getDepartment() { return department; }
    public double getMarks() { return marks; }
}
  
// ==== Controller ====
class StudentController {
    private Connection conn;

    public StudentController() throws Exception {
        Class.forName("org.h2.Driver");
        conn = DriverManager.getConnection("jdbc:h2:mem:studentdb", "sa", "");
        conn.setAutoCommit(false);
        createTable();
    }

    private void createTable() throws SQLException {
        String sql = "CREATE TABLE IF NOT EXISTS Student (" +
                     "StudentID INT PRIMARY KEY, " +
                     "Name VARCHAR(100), " +
                     "Department VARCHAR(100), " +
                     "Marks DOUBLE)";
        try (Statement stmt = conn.createStatement()) {
            stmt.execute(sql);
            conn.commit();
        }
    }

    public void addStudent(Student student) {
        String sql = "INSERT INTO Student VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, student.getStudentID());
            pstmt.setString(2, student.getName());
            pstmt.setString(3, student.getDepartment());
            pstmt.setDouble(4, student.getMarks());
            pstmt.executeUpdate();
            conn.commit();
            System.out.println("Student added successfully.");
        } catch (SQLException e) {
            rollback();
            System.out.println("Error: " + e.getMessage());
        }
    }

    public void viewAllStudents() {
        String sql = "SELECT * FROM Student";
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            System.out.printf("%-10s %-20s %-15s %-10s%n", "ID", "Name", "Department", "Marks");
            while (rs.next()) {
                System.out.printf("%-10d %-20s %-15s %-10.2f%n",
                        rs.getInt("StudentID"),
                        rs.getString("Name"),
                        rs.getString("Department"),
                        rs.getDouble("Marks"));
            }
        } catch (SQLException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }

    public void updateStudent(Student student) {
        String sql = "UPDATE Student SET Name=?, Department=?, Marks=? WHERE StudentID=?";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, student.getName());
            pstmt.setString(2, student.getDepartment());
            pstmt.setDouble(3, student.getMarks());
            pstmt.setInt(4, student.getStudentID());
            int rows = pstmt.executeUpdate();
            conn.commit();
            if (rows > 0)
                System.out.println("Student updated successfully.");
            else
                System.out.println("Student not found.");
        } catch (SQLException e) {
            rollback();
            System.out.println("Error: " + e.getMessage());
        }
    }

    public void deleteStudent(int id) {
        String sql = "DELETE FROM Student WHERE StudentID=?";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, id);
            int rows = pstmt.executeUpdate();
            conn.commit();
            if (rows > 0)
                System.out.println("Student deleted successfully.");
            else
                System.out.println("Student not found.");
        } catch (SQLException e) {
            rollback();
            System.out.println("Error: " + e.getMessage());
        }
    }

    private void rollback() {
        try {
            conn.rollback();
        } catch (SQLException e) {
            System.out.println("Rollback failed: " + e.getMessage());
        }
    }

    public void close() throws SQLException {
        conn.close();
    }
}

// ==== View ====
public class MainApp {
    public static void main(String[] args) {
        try (Scanner sc = new Scanner(System.in)) {
            StudentController controller = new StudentController();

            while (true) {
                System.out.println("\nStudent Management System");
                System.out.println("1. Add Student");
                System.out.println("2. View All Students");
                System.out.println("3. Update Student");
                System.out.println("4. Delete Student");
                System.out.println("5. Exit");
                System.out.print("Choose an option: ");
                int choice = sc.nextInt();
                sc.nextLine(); // Consume newline

                switch (choice) {
                    case 1 -> {
                        System.out.print("Enter ID: ");
                        int id = sc.nextInt(); sc.nextLine();
                        System.out.print("Enter Name: ");
                        String name = sc.nextLine();
                        System.out.print("Enter Department: ");
                        String dept = sc.nextLine();
                        System.out.print("Enter Marks: ");
                        double marks = sc.nextDouble();
                        controller.addStudent(new Student(id, name, dept, marks));
                    }
                    case 2 -> controller.viewAllStudents();
                    case 3 -> {
                        System.out.print("Enter ID to update: ");
                        int id = sc.nextInt(); sc.nextLine();
                        System.out.print("Enter New Name: ");
                        String name = sc.nextLine();
                        System.out.print("Enter New Department: ");
                        String dept = sc.nextLine();
                        System.out.print("Enter New Marks: ");
                        double marks = sc.nextDouble();
                        controller.updateStudent(new Student(id, name, dept, marks));
                    }
                    case 4 -> {
                        System.out.print("Enter ID to delete: ");
                        int id = sc.nextInt();
                        controller.deleteStudent(id);
                    }
                    case 5 -> {
                        controller.close();
                        System.out.println("Exiting...");
                        return;
                    }
                    default -> System.out.println("Invalid option.");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
